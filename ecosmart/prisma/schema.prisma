// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id // This will be Clerk's user ID
  email         String    @unique
  name          String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile information
  location      String?
  carbonGoal    Float?    @default(0) // Monthly carbon goal in kg CO2
  points        Int       @default(0)
  level         Int       @default(1)

  purchases           Purchase[]
  carbonFootprints    CarbonFootprint[]
  achievements        UserAchievement[]
  communityPosts      CommunityPost[]
  communityComments   CommunityComment[]
  communityLikes      CommunityLike[]
  challenges          UserChallenge[]

  @@map("users")
}

model Purchase {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  description String
  category    String
  subcategory String?
  carbonImpact Float   // kg CO2 equivalent
  imageUrl    String?  // Receipt image
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model CarbonFootprint {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime @default(now())
  transport   Float    @default(0) // kg CO2
  food        Float    @default(0) // kg CO2
  energy      Float    @default(0) // kg CO2
  shopping    Float    @default(0) // kg CO2
  other       Float    @default(0) // kg CO2
  total       Float    // Sum of all categories
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carbon_footprints")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  category    String   // e.g., "carbon_reduction", "community", "streak"
  points      Int      @default(0)
  condition   String   // JSON string for flexible condition storage
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model CommunityPost {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  imageUrl  String?
  category  String   // e.g., "tip", "achievement", "question"
  tags      String   @default("") // JSON array as string
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments CommunityComment[]
  postLikes CommunityLike[]

  @@map("community_posts")
}

model CommunityComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("community_comments")
}

model CommunityLike {
  id     String @id @default(cuid())
  postId String
  userId String

  post CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("community_likes")
}

model Challenge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  category    String
  target      Float    // Target value (e.g., reduce 10kg CO2)
  unit        String   // e.g., "kg_co2", "purchases"
  startDate   DateTime
  endDate     DateTime
  points      Int      @default(0)
  isGlobal    Boolean  @default(false)
  createdAt   DateTime @default(now())

  participants UserChallenge[]

  @@map("challenges")
}

model UserChallenge {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  progress    Float    @default(0)
  completed   Boolean  @default(false)
  completedAt DateTime?
  joinedAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@map("user_challenges")
} 